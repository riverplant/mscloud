Reactive Stream: Java9提供響應式規範  JVM 面向流的庫的標準和規範

Flow: java.tuil.concurrent.Flow:基於消息驅動

1. 可以處理可能無限數量的元素

2. 有序

3. 在組件之間異步傳遞元素


4. 强制性非阻塞, 背壓模式: 由一個隊列做緩存
    背壓: 儅前元素正在處理的時候，下一個元素不會被處理
    
綫程越多越好還是越少越好？
基於CPU核心，例如説4核，100個綫程。 一個核心排隊很多綫程，儅綫程切換的時候，切換需要保留現場，浪費内存，浪費時間

理論來説每一個核心就一個綫程一直在運行！！！！！讓少量的綫程一直忙，不讓大量的綫程一直切換等待

-------------------------------------------------------------------------------
瀏覽器發送請求
-------->zcceptor(8080 boss 專門負責接數據) 
--->放入緩衝區1
 ----->有和核數相同的worker綫程一直從緩衝區1拿數據
 ---->每一個worker綫程有可能也會需要一個數據緩衝區2來調用遠程的服務等待響應（TCP）,或者一次IO調用
 ------>響應完成後返回的數據會自動回到數據緩衝區2[worker用回調來感知]
 ------>儅緩衝區沒有收到數據的時候，worker綫程可以去緩衝區1中繼續拿新的數據保持工作
 ----------------------------------------------------------------------------------
 讓所有的一部綫程都能互相監聽消息、處理消息，構建實時消息處理流!!!!!!!!!!!
 
 1.Publisher 發佈者： 負責流的源頭，可以異步非阻塞dataBuffer發佈到緩衝區
 
 2. Subscriber 訂閲者: 需要得到使用Processor對原數據進行處理后的數據
 
 3. Subscription 訂閲關係【發佈者和訂閱者綁定】
 
 4. Processor:中間處理器，包含了對上一步數據的subscriber，以及將處理後的數據對下一步的publisher
 
 
 
Reactor核心!!!!!!!!
高并發： 緩存、異步、隊列

1. Reactive core: fully non-blocking



2. Typed [0|1|N] Sequences: 
   Mono[0|1] : 有1個或者0個數據
   Flux[N]: 有一對數據
   
   
3. NON-BLOCKING IO: NETOWRK & 
   非阻塞原理： 緩衝 + 回調



onNext x 0...N[onError|onComplete]

onNext: 儅某個元素到達，我們可以定義它的處理邏輯
  onComplete:一切正常觸發
   onError： 異常觸發
 
 ---------------Mono和flux------------------------------
 
 事件感知API-doOnXxx
 SinalType:  
    SUBSCRIBE: 被订阅
    REQUEST:   请求了N个元素
    CANCEL:    流被取消
    ON_SUBSCRIBE: 被订阅的时候
    ON_NEXT: 在元素到达
    ON_ERROR:
    ON_COMPLETE:
    AFTER_TEMINATE:被中断以后
    CURRENT_CONTEXT: 当前上下文
    ON_CONTEXT:      感知上下文
    
 
 
 
 
 
 
 
 